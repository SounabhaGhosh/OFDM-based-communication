lc; clear; close all;

% Parameters
M = 16;                % 16-QAM modulation order
fs = 1e6;             % Sampling frequency
Ts = 1/fs;            % Sampling time
N = 1000;             % Number of symbols
fc_offset = 500;      % Frequency offset (Hz)
phase_noise_std = 0.01; % Phase noise standard deviation

% Generate random QAM symbols
data = randi([0 M-1], N, 1);
qam_symbols = qammod(data, M, 'UnitAveragePower', true);

% Simulate frequency offset
t = (0:N-1) * Ts;
freq_offset_signal = qam_symbols .* exp(1j*2*pi*fc_offset*t.');

% Simulate phase noise
phase_noise = phase_noise_std * randn(N, 1);
impaired_signal = freq_offset_signal .* exp(1j * phase_noise);

% Apply Phase-Locked Loop (PLL) for signal recovery
pll_output = zeros(N, 1);
phase_est = 0;
for k = 2:N
    error_signal = angle(impaired_signal(k) * conj(pll_output(k-1)));
    phase_est = phase_est + 0.02 * error_signal; % PLL gain
    pll_output(k) = impaired_signal(k) * exp(-1j * phase_est);
end

% Demodulation
recovered_data = qamdemod(pll_output, M, 'UnitAveragePower', true);

% Plot results
figure;
subplot(3,1,1);
scatter(real(qam_symbols), imag(qam_symbols));
title('Original QAM Constellation');
grid on;

subplot(3,1,2);
scatter(real(impaired_signal), imag(impaired_signal));
title('Impaired Signal Constellation');
grid on;

subplot(3,1,3);
scatter(real(pll_output), imag(pll_output));
title('Recovered QAM Constellation');
grid on;

disp('QAM Baseband Transceiver Simulation Completed!');
